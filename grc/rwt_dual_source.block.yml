#Copywrite 2018 Red Wire Technologies
#Copywrite 2020 Red Wire Technology
id: rwt_dual_source
label: RWT Dual Source
category: "[Kraken]"
flags: throttle

documentation: |-
  RWT Dual Source Block

file_format: 1

parameters:
  - id: chip_num
    label: Chip Number
    dtype: int
    default: 0
    options: [0, 1]
  - id: rx1_en
    label: RX1 Enable
    dtype: bool
    default: True
    options: [True, False]
  - id: rx2_en
    label: RX2 Enable
    dtype: bool
    default: False
    options: [True, False]
  - id: freq
    label: Frequency
    dtype: real
    default: 2.4e9
  - id: samplerate
    label: Sample rate
    dtype: real
    default: 5e6
  - id: bandwidth
    label: RF Bandwidth
    dtype: real
    default: int(40e6)
  - id: rfport1
    label: RF Port 1 Select
    dtype: enum
    default: A_BALANCED
    options:
      - A_BALANCED
      - B_BALANCED
      - C_BALANCED
      - A_N
      - A_P
      - B_N
      - B_P
      - C_N
      - C_P
      - TX_MONITOR1
      - TX_MONITOR2
      - TX_MONITOR1_2
    option_labels:
      - A_BALANCED
      - B_BALANCED
      - C_BALANCED
      - A_N
      - A_P
      - B_N
      - B_P
      - C_N
      - C_P
      - TX_MONITOR1
      - TX_MONITOR2
      - TX_MONITOR1_2
  - id: rfport2
    label: RF Port 2 Select
    dtype: enum
    default: A_BALANCED
    options:
      - A_BALANCED
      - B_BALANCED
      - C_BALANCED
      - A_N
      - A_P
      - B_N
      - B_P
      - C_N
      - C_P
      - TX_MONITOR1
      - TX_MONITOR2
      - TX_MONITOR1_2
    option_labels:
      - A_BALANCED
      - B_BALANCED
      - C_BALANCED
      - A_N
      - A_P
      - B_N
      - B_P
      - C_N
      - C_P
      - TX_MONITOR1
      - TX_MONITOR2
      - TX_MONITOR1_2
  - id: gain_mode
    label: Gain Mode
    dtype: enum
    default: manual
    options:
      - manual
      - slow_attack
      - fast_attack
      - hybrid
    option_labels:
      - Manual
      - Slow
      - Fast
      - Hybrid
  - id: manual_gain
    label: Manual Gain (dB)
    dtype: real
    default: 64.0
  - id: quadrature
    label: Quadrature
    category: Advanced RF
    dtype: int
    default: 'True'
    options: ['1', '0']
    option_labels: ['True', 'False']
    hide: part
  - id: rfdc
    label: RF DC
    category: Advanced RF
    dtype: int
    default: 'True'
    options: ['1', '0']
    option_labels: ['True', 'False']
    hide: part
  - id: bbdc
    label: BB DC
    category: Advanced RF
    dtype: int
    default: 'True'
    options: ['1', '0']
    option_labels: ['True', 'False']
    hide: part
  - id: filter
    label: Filter
    category: Advanced RF
    dtype: file_open
    hide: part
  - id: auto_filter
    label: Filter auto
    category: Advanced RF
    dtype: bool
    default: True
    options: [True, False]
    hide: part
  - id: extra
    label: Other Settings
    category: Advanced RF
    dtype: string
    default: ""
    hide: part
  - id: escape
    label: Packet Escape
    category: Advanced Device
    dtype: int
    default: '0xAAAAAAAAAAAAAAAA'
    hide: part
  - id: use_tags
    label: Use Tags
    category: Advanced Device
    dtype: bool
    default: True
    options: [True, False]
  - id: force_reload
    label: Force Reload
    category: Advanced Device
    dtype: bool
    default: False
    options: [True, False]
    hide: part
  - id: buffer_size
    label: Buffer Size
    category: Advanced Device
    dtype: int
    default: 32000
    hide: part
  - id: correction_enable
    label: Correction Enable
    category: Advanced Device
    dtype: int
    default: 'True'
    options: ['3', '0']
    option_labels: ['True', 'False']
    hide: part
  - id: bypass_enable
    label: CIC Bypass Enable
    category: Advanced Device
    dtype: bool
    default: 'False'
    options: ['1', '0']
    option_labels: ['True', 'False']
    hide: part

inputs:
  - domain: message
    id: ctrl
    optional: true

outputs:
  - domain: stream
    dtype: complex
    label: ch0
  - domain: stream
    dtype: complex
    hide: ${ sum([rx1_en, rx2_en]) < 2 }
    optional: ${ sum([rx1_en, rx2_en]) < 2 }
    label: ch1

asserts:
  - ${ (freq >= 70e6 and freq <= 6e9) }
  - ${ not (auto_filter and len(filter)) }
  - ${ (int(samplerate) >= 2084000) or (len(filter) > 0) or auto_filter }
  - ${ sum([rx1_en, rx2_en]) > 0 }

templates:
  imports: |-
    import rwt
    import pmt
  make: |-
        None
        rwt_cfg = {
          "rx_freq": str(int(${freq})),
          "rx_bw": str(int(${bandwidth})),
          "samplerate": str(int(${samplerate})),
          "rx_rfport1": "${rfport1}",
          "rx_rfport2": "${rfport2}",
          "escape": str(${escape}),
          "rx_gain1": str(${manual_gain}),
          "rx_gain1_mode": "${gain_mode}",
          "rx_gain2": str(${manual_gain}),
          "rx_gain2_mode": "${gain_mode}",
          "quadrature": str(int(${quadrature})),
          "rfdc": str(int(${rfdc})),
          "bbdc": str(int(${bbdc})),
          "decimation_arbitrary": str(int(0)),
          "correction_enable": str(int(${correction_enable})),
          "bypass_enable": str(int(${bypass_enable})),
        }
        rwt_extra = {} if ${extra} == "" else dict(x.split('=') for x in ${extra}.split(','))
        rwt_cfg.update(rwt_extra)

        phy_name = ""
        rx_name = ""
        tx_name = ""
        base_address = ""

        if ${chip_num} == 0:
            phy_name = "ad9361-phy-A"
            rx_name = "cf-ad9361-A"
            tx_name = "cf-ad9361-dds-core-A"
            base_address = "0x9D000000"
        else:
            phy_name = "ad9361-phy-B"
            rx_name = "cf-ad9361-B"
            tx_name = "cf-ad9361-dds-core-B"
            base_address = "0x9E000000"

        self.${id} = rwt.rwt_source(
          pmt.to_pmt(rwt_cfg), ${rx1_en}, ${rx2_en},
          int(base_address, 0), ${filter}, ${use_tags}, ${auto_filter},
          "dual", ${force_reload}, ${buffer_size},
          phy_name, rx_name, tx_name)

  callbacks:
    - self.${id}.set_config("rx_freq", str(int(${freq})))
    - self.${id}.set_config("rx_bw", str(int(${bandwidth})))
    - self.${id}.set_config("samplerate", str(int(${samplerate})))
    - self.${id}.set_config("rx_rfport1", "${rfport1}")
    - self.${id}.set_config("rx_rfport2", "${rfport2}")
    - self.${id}.set_config("rx_gain1_mode", "${gain_mode}")
    - self.${id}.set_config("rx_gain1", str(${manual_gain}))
    - self.${id}.set_config("rx_gain2_mode", "${gain_mode}")
    - self.${id}.set_config("rx_gain2", str(${manual_gain}))
    - self.${id}.set_config("quadrature", str(int(${quadrature})))
    - self.${id}.set_config("rfdc", str(int(${rfdc})))
    - self.${id}.set_config("bbdc", str(int(${bbdc})))
    - self.${id}.set_config("escape", str(${escape}))
    - self.${id}.set_config("correction_enable", str(int(${correction_enable})))
    - |
      if ${extra} != "":
          cfg = dict(x.split('=') for x in ${extra}.split(','))
          self.${id}.config_msg_handler(pmt.to_pmt(cfg))
